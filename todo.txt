tests
--------------
export VAMP_TEST_CONNECT=SQLite,dbi:SQLite:test.db
export VAMP_TEST_CONNECT=Oracle,dbi:Oracle://locahost:1521/SCM
export VAMP_TEST_CONNECT=Redis,host,localhost,port,6379


tables model
--------------

putting collections into their own tables is convenient for sorting, but
has a problem: arrays are not easily stored. 

Alternatives:

- repeat the ID in the collection, pushing columns that are not null
into an array. Requires an unique rowid for ordering (or order by row id)

-------------

- order by errors
- paging
- update, upsert
- obj id in hash? _id ? oid? _oid?
- flex obj id ? primary key ?
- relationships

   my $rel = $db->relation('has' => from=>$id, to=>$id, data=>{ name=>'joe' } ); 
   # inserts and returns object
   # $rel is a Relationship object
   $rel = $db->relation('has' => from=>$id, to=>$id );
   $rel->delete;
   $rel->update( data=>{ newdata } );
   $rel = $db->relation( from=>$id, to=>$id ); # defaults to 'edge'


- CLASS column on KV ?

- select option on find ( ->find({}, { select=>['name'] } )

- deploy option on database connect
- deploy db with "add column" for progressive updating
- collection storage => clob in obj table or kv ( storage=>'kv', 'obj', 'both' )
- set operations on array kv fields: set_update( children=>{ -push=>[4,5,6] } )  


